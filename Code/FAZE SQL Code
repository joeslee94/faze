-----------------------------
--Birth of the server
-----------------------------
--USE MASTER;
--GO 

-- Drop database
--IF DB_ID(N'FAZE') IS NOT NULL DROP DATABASE FAZE;
DROP DATABASE IF EXISTS FAZE;
GO

-- If database could not be created due to open connections, abort
IF @@ERROR = 3702 
   RAISERROR(N'Database cannot be dropped because there are still open connections.', 127, 127) WITH NOWAIT, LOG;
GO

-- Create database
CREATE DATABASE FAZE;
GO

-- Use Faze
USE FAZE;
GO

-----------------------------
--Schema Creation
-----------------------------
CREATE SCHEMA faze AUTHORIZATION dbo;
GO

CREATE SCHEMA trip AUTHORIZATION dbo;
GO

CREATE SCHEMA fish AUTHORIZATION dbo;
GO

CREATE SCHEMA bait AUTHORIZATION dbo;
GO


-----------------------------
--Table Creation
-----------------------------
CREATE TABLE faze.userinfo
(
userid             INT          NOT NULL IDENTITY(1,1),
username           NVARCHAR(30) NOT NULL,
email              NVARCHAR(30) NOT NULL,
password           NVARCHAR(30) NOT NULL,
usernameinitials   NVARCHAR(5)  NOT NULL,

CONSTRAINT PK_faze_userinfo PRIMARY KEY(username)
);

CREATE NONCLUSTERED INDEX idx_nc_FazeUserID ON faze.userinfo(userid);
CREATE NONCLUSTERED INDEX idx_nc_FazeUserName ON faze.userinfo(username);
GO

CREATE TABLE trip.fishing
(
tripnumber       INT          NOT NULL IDENTITY (1, 1),
dateoftrip       DATE         NOT NULL,
timestart        TIME         NOT NULL,
timespent        DECIMAL(4,2) NOT NULL,
triplocation     NVARCHAR(30) NOT NULL,
totalfish        INT          NOT NULL,
bites            INT          NULL,
numofbaitused    INT          NULL,
moonphase        NVARCHAR(10) NULL,
tide             NVARCHAR(10) NULL,
season           NVARCHAR(5)  NULL,
avgtemp          DECIMAL(3,1) NULL,
weathercond      NVARCHAR(50) NULL,
comments         NVARCHAR(80) NULL,
username         NVARCHAR(30) NOT NULL,

CONSTRAINT PK_trip_fishing PRIMARY KEY(dateoftrip),
CONSTRAINT FK_faze_userinfo FOREIGN KEY(username)
	REFERENCES faze.userinfo(username)
);

CREATE NONCLUSTERED INDEX idx_nc_TripNumber ON trip.fishing(tripnumber);
CREATE NONCLUSTERED INDEX idx_nc_DateTimeofTrip ON trip.fishing(dateoftrip);
CREATE NONCLUSTERED INDEX idx_nc_TripUserName ON trip.fishing(username);
GO

ALTER TABLE trip.fishing ADD CONSTRAINT df_dateoftrip DEFAULT CONVERT(DATE, GETDATE()) FOR dateoftrip;
ALTER TABLE trip.fishing ADD CONSTRAINT df_timestartoftrip DEFAULT CONVERT(TIME(0), GETDATE()) FOR timestart;
GO

CREATE TABLE fish.caught
(
fishid           INT          NOT NULL IDENTITY (1,1),
fishtype         NVARCHAR(30) NOT NULL,
baitluretype     NVARCHAR(30) NULL,
baitlurecolor    NVARCHAR(30) NULL,
rodbrand         NVARCHAR(30) NULL,
timecaught       TIME(0)      NULL,
fishweight       DECIMAL(6,3) NULL,
fishlength       DECIMAL(6,3) NULL,
dateoftrip       DATE         NOT NULL,

CONSTRAINT PK_caught PRIMARY KEY(fishid),
CONSTRAINT FK_trip_fishing FOREIGN KEY(dateoftrip)
	REFERENCES trip.fishing(dateoftrip)
);

CREATE NONCLUSTERED INDEX idx_nc_FishID ON fish.caught(fishid);
CREATE NONCLUSTERED INDEX idx_nc_FishType ON fish.caught(fishtype);
CREATE NONCLUSTERED INDEX idx_nc_CaughtDateofTrip ON fish.caught(dateoftrip);
GO

ALTER TABLE fish.caught ADD CONSTRAINT df_dateoftrip DEFAULT CONVERT(DATE, GETDATE()) FOR dateoftrip;
GO

CREATE TABLE bait.used
(

baitname           NVARCHAR(30) NOT NULL,
fishcaughtbybait   INT          NOT NULL,
priceperpkg        MONEY        NULL,
dateoftrip         DATE         NOT NULL,

CONSTRAINT PK_caught PRIMARY KEY(baitname, dateoftrip),
CONSTRAINT FK_trip_fishing FOREIGN KEY(dateoftrip)
	REFERENCES trip.fishing(dateoftrip)
);
GO

CREATE NONCLUSTERED INDEX idx_nc_BaitName ON bait.used(baitname);
CREATE NONCLUSTERED INDEX idx_nc_FishCaughtbyBait ON bait.used(fishcaughtbybait);
CREATE NONCLUSTERED INDEX idx_nc_BaitDateofTrip ON bait.used(dateoftrip);
GO

ALTER TABLE bait.used ADD CONSTRAINT df_dateoftrip DEFAULT CONVERT(DATE, GETDATE()) FOR dateoftrip;
GO

-----------------------------
--Testing Server
-----------------------------

-----------------------------
--Data Insertion
-----------------------------

--faze.userinfo(userid, username, email, password, nameinitials)
INSERT INTO faze.userinfo VALUES('joeslee',  'joeslee94@outlook.com',  'password1', 'SL1');
INSERT INTO faze.userinfo VALUES('joeslee1', 'joeslee941@outlook.com', 'password2', 'SL2');
INSERT INTO faze.userinfo VALUES('joeslee2', 'joeslee942@outlook.com', 'password3', 'SL3');
INSERT INTO faze.userinfo VALUES('joeslee3', 'joeslee943@outlook.com', 'password4', 'SL4');
GO

--trip.fishing(tripnumber/dateoftrip/timestart/timespent/triplocation/totalfish/bites/numofbaitused/moonphase/tide/season/avgtemp/weathercond/comments/username)
INSERT INTO trip.fishing(timespent, triplocation, totalfish, bites, numofbaitused, moonphase, tide, season, avgtemp, weathercond, comments, username)
VALUES(05.45, 'Monument Lake', 4, 10, 20, 'Wax Cresc', 'Low', 'Wint', 32.2, 'Cold', 'Bring shelter next time for trip', 'joeslee');

INSERT INTO trip.fishing(dateoftrip, timespent, triplocation, totalfish, bites, numofbaitused, moonphase, tide, season, avgtemp, weathercond, comments, username)
VALUES('2021-02-14', 05.45, 'Monument Lake', 4, 4, 6, 'Wax Cresc', 'Low', 'Wint', 32.2, 'Cold', 'Bring shelter next time for trip', 'joeslee');
GO

--fish.caught(fishid, fishtype, baitluretype, baitlurecolor, rodbrand, timecaught, fishweight, fishlength, datetimeoftrip)
INSERT INTO fish.caught(fishtype, baitluretype, baitlurecolor, rodbrand, timecaught, fishweight, fishlength, dateoftrip)
VALUES('Rainbow Trout', 'Mealworm', 'Gold', 'Cabelas', '12:07', 3.56, 11.24, DEFAULT);
INSERT INTO fish.caught(fishtype, baitluretype, baitlurecolor, rodbrand, timecaught, fishweight, fishlength, dateoftrip)
VALUES('Rainbow Trout', 'Mealworm', 'Gold', 'Cabelas', '12:10', 3.45, 11.34, DEFAULT);
INSERT INTO fish.caught(fishtype, baitluretype, baitlurecolor, rodbrand, timecaught, fishweight, fishlength, dateoftrip)
VALUES('Rainbow Trout', 'Mealworm', 'Gold', 'Cabelas', '12:40', 3.46, 12.3, DEFAULT);
INSERT INTO fish.caught(fishtype, baitluretype, baitlurecolor, rodbrand, timecaught, fishweight, fishlength, dateoftrip)
VALUES('Rainbow Trout', 'Mealworm', 'Gold', 'Cabelas', '13:07', 3.6, 12.4, DEFAULT);

INSERT INTO fish.caught(fishtype, baitluretype, baitlurecolor, rodbrand, timecaught, fishweight, fishlength, dateoftrip)
VALUES('Cutthroat Trout', 'Waxworm', 'Gold', 'Cabelas', '12:07', 3.56, 11.24, '2021-02-14');
INSERT INTO fish.caught(fishtype, baitluretype, baitlurecolor, rodbrand, timecaught, fishweight, fishlength, dateoftrip)
VALUES('Rainbow Trout', 'Waxworm', 'Gold', 'Cabelas', '12:10', 3.45, 11.34, '2021-02-14');
INSERT INTO fish.caught(fishtype, baitluretype, baitlurecolor, rodbrand, timecaught, fishweight, fishlength, dateoftrip)
VALUES('Bluegill', 'Mealworm', 'Pink', 'Extreme', '12:40', 3.46, 12.3, '2021-02-14');
INSERT INTO fish.caught(fishtype, baitluretype, baitlurecolor, rodbrand, timecaught, fishweight, fishlength, dateoftrip)
VALUES('Rainbow Trout', 'Mealworm', 'Pink', 'Extreme', '13:07', 3.6, 12.4, '2021-02-14');
GO

--bait.used(baitname, fishcaughtbybait, priceperpkg, dateoftrip)
INSERT INTO bait.used(baitname, fishcaughtbybait, priceperpkg, dateoftrip)
VALUES('Mealworm', 4, 5, DEFAULT);

INSERT INTO bait.used(baitname, fishcaughtbybait, priceperpkg, dateoftrip)
VALUES('Mealworm', 2, 4, '2021-02-14');
INSERT INTO bait.used(baitname, fishcaughtbybait, priceperpkg, dateoftrip)
VALUES('Waxworm', 2, 3, '2021-02-14');
GO

-----------------------------
--Referencing Data
-----------------------------
SELECT * FROM faze.userinfo
GO

SELECT * FROM trip.fishing
GO

SELECT * FROM fish.caught
GO

SELECT * FROM bait.used
GO
--shows how many bites and catches on specific bait, lure color, and rod brand
SELECT DISTINCT F.bites AS totalbites, F.totalfish, C.baitlurecolor, C.rodbrand, F.dateoftrip
FROM trip.fishing AS F
  JOIN fish.caught AS C
    ON F.dateoftrip = C.dateoftrip;
GO

--heaviest fish on 2021-02-17
SELECT MAX(fishweight) AS heaviestfish, dateoftrip
FROM fish.caught
WHERE dateoftrip = '2021-02-17'
GROUP BY dateoftrip;
GO

--longest fish on 2021-02-14
SELECT MAX(fishlength) AS longestfish, dateoftrip
FROM fish.caught
WHERE dateoftrip = '2021-02-14'
GROUP BY dateoftrip;
GO

--maximum # of catches with certain bait
SELECT fishcaughtbybait, baitname, dateoftrip
FROM bait.used
ORDER BY fishcaughtbybait DESC;
GO
